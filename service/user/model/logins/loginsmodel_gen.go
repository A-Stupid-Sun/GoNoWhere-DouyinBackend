// Code generated by goctl. DO NOT EDIT.

package logins

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	loginsFieldNames          = builder.RawFieldNames(&Logins{})
	loginsRows                = strings.Join(loginsFieldNames, ",")
	loginsRowsExpectAutoSet   = strings.Join(stringx.Remove(loginsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	loginsRowsWithPlaceHolder = strings.Join(stringx.Remove(loginsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	loginsModel interface {
		Insert(ctx context.Context, data *Logins) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Logins, error)
		FindOneByName(ctx context.Context, name string) (*Logins, error)
		FindOneByUserId(ctx context.Context, userId int64) (*Logins, error)
		Update(ctx context.Context, data *Logins) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLoginsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Logins struct {
		Id        int64        `db:"id"` // 自增主键
		CreateAt  time.Time    `db:"create_at"`
		UpdateAt  time.Time    `db:"update_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
		UserId    int64        `db:"user_id"`
		Name      string       `db:"name"`
		PassWord  string       `db:"pass_word"`
	}
)

func newLoginsModel(conn sqlx.SqlConn) *defaultLoginsModel {
	return &defaultLoginsModel{
		conn:  conn,
		table: "`logins`",
	}
}

func (m *defaultLoginsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLoginsModel) FindOne(ctx context.Context, id int64) (*Logins, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loginsRows, m.table)
	var resp Logins
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoginsModel) FindOneByName(ctx context.Context, name string) (*Logins, error) {
	var resp Logins
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", loginsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoginsModel) FindOneByUserId(ctx context.Context, userId int64) (*Logins, error) {
	var resp Logins
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", loginsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoginsModel) Insert(ctx context.Context, data *Logins) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, loginsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.UserId, data.Name, data.PassWord)
	return ret, err
}

func (m *defaultLoginsModel) Update(ctx context.Context, newData *Logins) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, loginsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeletedAt, newData.UserId, newData.Name, newData.PassWord, newData.Id)
	return err
}

func (m *defaultLoginsModel) tableName() string {
	return m.table
}
